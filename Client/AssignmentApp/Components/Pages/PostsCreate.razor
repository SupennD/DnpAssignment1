@page "/posts/create"
@using System.Security.Claims
@using AssignmentApp.Services
@using DTOs
@rendermode InteractiveServer
@inject IPostService HttpPostService
@inject IUserService HttpUserService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider SimpleAuthProvider

<PageTitle>Post</PageTitle>

<AuthorizeView>
    <Authorized>
        <h2>Create a Post</h2>

        <form @formname="createPost" @onsubmit="CreatePostAsync">

            @if (!string.IsNullOrEmpty(error))
            {
                <div class="alert-danger">@error</div>
            }

            @if (!string.IsNullOrEmpty(success))
            {
                <div class="alert-success">@success</div>
            }

            <div class="m-3">
                <label for="title" class="form-label">Title</label>
                <input type="text" class="form-control" id="title" @bind="title">
            </div>
            <div class="m-3">
                <label for="body" class="form-label">Body</label>
                <input type="text" class="form-control" id="body" @bind="body">
            </div>

            <button type="submit" class="btn btn-primary">Create Post</button>
        </form>
    </Authorized>
    <NotAuthorized>
        <h3>You are not logged in.</h3>
        <button class="btn btn-primary" @onclick='() => NavigationManager.NavigateTo("login")'>Log in</button>
        <button class="btn btn-secondary" @onclick='() => NavigationManager.NavigateTo("register")'>Register</button>
    </NotAuthorized>
</AuthorizeView>

@code
{
    [CascadingParameter] public required Task<AuthenticationState> State { get; set; }
    private int userId;
    private string? title;
    private string? body;
    private string? success;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await State;
        var claimsPrincipal = authenticationState.User;
        if (claimsPrincipal.Identity is null || !claimsPrincipal.Identity.IsAuthenticated)
        {
            // the user is not logged in
            return;
        }

        var claims = claimsPrincipal.Claims;
        var userIdAsString = claims.Single(c => c.Type == ClaimTypes.NameIdentifier).Value;
        userId = int.Parse(userIdAsString);
    }

    public async Task CreatePostAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(title))
            {
                throw new Exception("Please enter a title.");
            }

            if (string.IsNullOrEmpty(body))
            {
                throw new Exception("Please enter a body.");
            }

            var createPostDto = new CreatePostDto
            {
                Body = body,
                Title = title,
                UserId = userId
            };

            await HttpPostService.AddPostAsync(createPostDto);
            success = "Created a post successfully.";
            error = null;
            title = null;
            body = null;
        }
        catch (Exception e)
        {
            success = null;
            error = e.Message;
        }
    }
}